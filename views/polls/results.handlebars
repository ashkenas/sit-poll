<div class="section">
    <div class="container is-max-desktop">
        <h1 class="title is-1">Results</h1>
        <div class="buttons">
            {{#if (or session.admin self)}}
                {{#if editable}}
                    <a class="button" href="/polls/{{poll._id}}/edit">Edit</a>
                {{/if}}
                <a class="button is-link" href="/polls/{{poll._id}}/metrics">Metrics</a>
            {{/if}}
            {{#if (or session.admin self)}}
                <button id="delete-button" class="button is-danger has-text-black">Delete</button>
            {{/if}}
        </div>
        <h2 class="title">{{poll.title}}</h2>
        <p class="subtitle">By <span>{{author}}</span></p>
        <div id="votes" style="margin-bottom:1rem;"></div>
        <div id="reactions" class="buttons"> 
            {{#each poll.reactions}}
                <button class="button is-outlined{{#if (equals ../reaction this.reaction)}} is-link{{/if}}" data-reaction="{{this.reaction}}" aria-label="{{this.reaction}}">
                    {{this.label}}&nbsp;<span class="count">{{this.count}}</span>
                </button>
            {{/each}}
        </div>
        <h3 class="title is-4">Comments</h3>
        <div id="comments">
            <div class="media">
                <div class="media-content">
                    <form id="comment-form">
                        <div class="field">
                            <div class="control">
                                <textarea class="textarea" id="comment" name="comment" aria-label="new comment" placeholder="Add a comment..."></textarea>
                            </div>
                            <p id="comment-error" class="help is-danger error"></p>
                        </div>
                        <div class="field">
                            <div class="control">
                                <input class="button is-info" type="submit">
                            </div>
                        </div>
                    </form>
                </div>
            </div>
            {{#each poll.comments}}
                <div class="media" data-id="{{this._id}}">
                    <div class="media-content">
                        <div class="content">
                        <p>
                            <strong>{{this.user.display_name}}</strong> <small>{{date this.date}}</small>
                            <br>
                            {{this.comment}}
                        </p>
                        </div>
                    </div>
                    {{#if (or ../session.self (equals this.user._id ../userId))}}
                        <div class="media-right">
                            <form method="POST" action="/polls/{{../poll._id}}/comments">
                                <input type="hidden" name="_method" value="DELETE">
                                <input type="hidden" name="_id" value="{{this._id}}">
                                <button aria-label="delete comment" class="delete" type="submit"></button>
                            </form>
                        </div>
                    {{/if}}
                </div>
            {{/each}}
        </div>
    </div>
</div>
<template id="vote-template">
    <div>
        <div class="media">
            <div class="media-left">
                <label class="label"></label>
            </div>
            <div class="media-content"></div>
            <div class="media-right">
                <p></p>
            </div>
        </div>
        <progress class="progress"></progress>
    </div>
</template>
<template id="comment-template">
    <div class="media">
        <div class="media-content">
            <div class="content">
            <p>
                <strong></strong> <small></small>
                <br>
            </p>
            </div>
        </div>
        <div class="media-right">
            <form method="POST" action="/polls/{{poll._id}}/comments">
                <input type="hidden" name="_method" value="DELETE">
                <input type="hidden" name="_id" value="">
                <button aria-label="delete comment" class="delete" type="submit"></button>
            </form>
        </div>
    </div>
</template>
<script>
const voteTemplate = document.getElementById('vote-template').content.firstElementChild;
const commentTemplate = document.getElementById('comment-template').content.firstElementChild;
const votesElement = document.getElementById('votes');
const commentsElement = document.getElementById('comments');

const reactedClass = "is-link";
const vote = {{vote}};
const manager = {{or session.self session.admin}};
let oldReaction = '{{reaction}}';

const showCommentError = errorManager('comment-error');
handleForm('comment-form', 'POST', '/polls/{{poll._id}}/comments', (formData) => {
    const comment = formData.get('comment');

    if (!comment || !comment.trim()) {
        showCommentError('Comment cannot be blank.');
        return;
    }

    showCommentError(); // Hides error info if no error

    return { comment: comment };
});

const counts = {};
const buttons = [...document.querySelectorAll('#reactions > button')].reduce((all, button) => {
    const reaction = button.getAttribute('data-reaction');
    all[reaction] = button;
    counts[reaction] = button.getElementsByClassName('count')[0];
    return all;
}, {});

// Make sure latency doesn't break up the order of reactions made
const handleReaction = (() => {
    let queue = [];
    let handling = false;
    return async (newReaction) => {
        queue.push(newReaction);
        if (handling) return;

        handling = true;
        while (queue.length) {
            const reaction = queue.shift();
            // See if we're changing the reaction or deleting it
            if (reaction === oldReaction) { // Delete
                const response = await fetch('/polls/{{poll._id}}/reaction', {
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    },
                    method: 'DELETE'
                });

                if (!response.ok || !(await response.json()).success) {
                    queue = [];
                    alert('Failed to delete your reaction.');
                } else {
                    buttons[reaction].classList.remove(reactedClass);
                    counts[reaction].innerText = +counts[reaction].innerText - 1;
                    oldReaction = null;
                }
            } else { // Update
                const response = await fetch('/polls/{{poll._id}}/reaction', {
                    body: JSON.stringify({ reaction: reaction }),
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    },
                    method: 'POST'
                });

                if (!response.ok || !(await response.json()).success) {
                    queue = [];
                    alert('Failed to update your reaction.');
                } else {
                    if (oldReaction) {
                        buttons[oldReaction].classList.remove(reactedClass);
                        counts[oldReaction].innerText = +counts[oldReaction].innerText - 1;
                    }
                    buttons[reaction].classList.add(reactedClass);
                    counts[reaction].innerText = +counts[reaction].innerText + 1;
                    oldReaction = reaction;
                }
            }
        }
        handling = false;
    };
})();

{{#if (or session.admin self)}}
document.getElementById('delete-button').addEventListener('click', async () => {
    if(!confirm('Are you sure you want to delete this poll?')) return;

    const result = await fetch('/polls/{{poll._id}}/', {
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        },
        method: 'DELETE'
    });

    const data = await result.json();

    if (result.ok && data.redirect)
        window.location = data.redirect;
    else alert(data.error || 'Internal server error.');
});
{{/if}}

Object.keys(buttons).forEach((reaction) => {
    buttons[reaction].addEventListener('click', (event) => handleReaction(reaction));
});

const renderVotes = (votes) => {
    votes.forEach((v, i) => {
        const temp = voteTemplate.cloneNode(true);
        const progress = temp.querySelector('progress');
        progress.value = v.ratio;
        progress.classList.add(`is-${i === vote ? 'link' : 'info'}`);
        progress.id = `choice${i}`;
        const label = temp.querySelector('label');
        label.innerText = v.choice;
        label.for = `choice${i}`;
        temp.querySelector('p').innerText = `${v.votes} (${Math.floor(v.ratio * 100)}%)`;
        votesElement.append(temp);
    });
};

const ws = new WebSocket('ws://' + location.host + location.pathname);
ws.addEventListener('message', event => {
    const {type, data} = JSON.parse(event.data);
    if (type === 'newComment') {
        const temp = commentTemplate.cloneNode(true);
        temp.setAttribute('data-id', data._id);
        temp.querySelector('strong').innerText = data.display_name;
        temp.querySelector('small').innerText = commentDate(data.date);
        temp.querySelector('p').append(document.createTextNode(data.comment));
        if (data.user !== '{{userId}}' && !manager)
            temp.querySelector('.media-right').remove();
        else
            temp.querySelector('input[name="_id"]').value = data._id;
        commentsElement.firstElementChild.after(temp);
    } else if (type === 'deleteComment') {
        document.querySelector(`[data-id="${data}"]`).remove();
    } else if (type === 'votes') {
        votesElement.innerHTML = '';
        renderVotes(data);
    } else if (type === 'reactions') {
        data.forEach(r => counts[r.reaction].innerText = r.count);
    } else if (type === 'deleteReaction') {
        counts[data].innerText = +counts[data].innerText - 1;
    }
});

renderVotes(JSON.parse(decodeURIComponent("{{{votesData}}}")));
</script>